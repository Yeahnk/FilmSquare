package member.dao;

import java.util.List;

import org.apache.ibatis.exceptions.PersistenceException;
import org.apache.ibatis.session.SqlSession;

import config.MyBatisUtil;
import member.vo.AtchFileVO;
import member.vo.MemberVO;
import util.MyBatisDao;

public class MemberDaoImpl extends MyBatisDao implements IMemberDao {

	private static IMemberDao memDao;
	
	private MemberDaoImpl() {}
	
	public static IMemberDao getInstance() {
		
		if(memDao == null) {
			memDao = new MemberDaoImpl();
		}
		return memDao;
	}
	
	@Override
	public List<MemberVO> getMemberList() {
		
		return selectList("member.getMemberList");
	}

	@Override
	public int insertMember(MemberVO mv) {
		SqlSession sqlSession = MyBatisUtil.getInstance();
		
		int cnt = 0;
		
		try {
			cnt = sqlSession.insert("member.insertMember", mv);
			if(cnt > 0) {
				sqlSession.commit();
			}
			
		} catch (PersistenceException ex) {
			sqlSession.rollback();
			ex.printStackTrace();
		}finally {
			sqlSession.close();
		}
		
		
		return cnt;
	}
	@Override
	public MemberVO loginChk(MemberVO login) {
		
		SqlSession sqlSession = MyBatisUtil.getInstance(true);
		
		MemberVO mv = null;
		
		try {
			
			mv = sqlSession.selectOne("member.loginChk", login);
			
			System.out.println("다오에 있는 mv 값 =>" + mv);
			
		} catch (PersistenceException ex) {
			ex.printStackTrace();
		}finally {
			sqlSession.close();
		}
		
		
		return mv;

	}


	@Override
	public MemberVO searchMember(MemberVO memId) {
		return selectOne("member.searchMember", memId);
	}
	@Override
	public MemberVO schMember(String memId) {
		return selectOne("member.schMember", memId);
	}

	@Override
	public int kakaoInsert(MemberVO mv) {
		
		SqlSession sqlSession = MyBatisUtil.getInstance(true);
		
		int cnt = 0;
		
		try {
			cnt = sqlSession.insert("member.kakaoInsert", mv);
			if(cnt > 0) {
				sqlSession.commit();
			}
			
		} catch (PersistenceException ex) {
//			sqlSession.rollback();
			ex.printStackTrace();
		}finally {
			sqlSession.close();
		}
		
		
		return cnt;
	}

	@Override
	public int updateIntro(MemberVO mv) {
		SqlSession sqlSession = MyBatisUtil.getInstance();
		
		int cnt=0;
		
		try {
			cnt= sqlSession.update("member.updateIntro",mv);
			if(cnt>0) {
				sqlSession.commit();
				System.out.println(cnt+"dao 소개글 "+mv);	
			}
		} catch (PersistenceException e) {
			
			e.printStackTrace();
		}finally {
			
			sqlSession.close();
		}
		
		
		return cnt;
	}
	@Override
	public int updateNic(MemberVO mv) {
		SqlSession sqlSession = MyBatisUtil.getInstance();
		
		int cnt=0;
		
		try {
			cnt= sqlSession.update("member.updateNic",mv);
			if(cnt>0) {
				sqlSession.commit();
				System.out.println(cnt+"dao 닉네임 "+mv);	
			}
		} catch (PersistenceException e) {
			
			e.printStackTrace();
		}finally {
			
			sqlSession.close();
		}
		
		
		return cnt;
	}
	@Override
	public boolean emailChk(String memEmail) {
		
		boolean isExist = false;
		
		SqlSession sqlSession = MyBatisUtil.getInstance();
		
		System.out.println("DAO(EMAIL) >> " + memEmail);
		
		
		try {
			MemberVO mv = sqlSession.selectOne("member.emailChk", memEmail);
			System.out.println(mv);
			if(mv != null) {
				sqlSession.commit();
				isExist = true;
			}
			
		} catch (PersistenceException ex) {
			ex.printStackTrace();
		}finally {
			sqlSession.close();
		}
		
		return isExist;
	}

	@Override
	public MemberVO searchInfo(String memEmail) {
		
		return selectOne("member.searchInfo", memEmail);
			
	}
		
		
		

	
}
